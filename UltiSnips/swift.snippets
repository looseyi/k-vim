snippet collectionViewDataSource "UICollectionViewDataSource (UIKit)"
//MARK: UICollectionViewDataSource

func numberOfSections(in collectionView: UICollectionView) -> Int {
	return ${1:section}
}

func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
	return ${2:row}
}

func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
	let cell = collectionView.dequeueReusableCellWithReuseIdentifier(${3:identifier}, forIndexPath: indexPath) as! UICollectionViewCell
	cell.confiugre(${4:item})
	return cell
}
endsnippet

snippet collectionViewDelegate "UICollectionViewDelegate (UIKit)"
//MARK: UICollectionViewDelegate


func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		${1:doSomething}
}

func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		${2:doSomething}
}
endsnippet


snippet tableViewDataSource "UITableViewDataSource (UIKit)"
//MARK: UITableViewDataSource
func numberOfSections(in tableView: UITableView) -> Int {
	return ${1:section}
}

func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
	return ${2:row}
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
	let cell = tableView.dequeueReusableCellWithIdentifier(${3:identifier}, forIndexPath: indexPath) as! UITableViewCell
	cell.confiugre(${4:item})
	return cell
}
endsnippet

snippet tableViewDelegate "UITableViewDelegate (UIKit)"
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
	${1:doSomething}
}

func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
	${2:doSomething}
}
endsnippet

snippet pickerViewDataSource "UIPickerViewDataSource"
extension $1: UIPickerViewDataSource {
	func numberOfComponents(in pickerView: UIPickerView) -> Int {
		return $2
	}

	func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
		return ${3:item.count}
	}

	func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
		return ${4:item[row]}
	}
}
endsnippet

snippet pickerViewDelegate "UIPickerViewDelegate"
extension $1: UIPickerViewDelegate {
	func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
		$2
	}
}
endsnippet

snippet alertController "UIAlertController (UIKit)"
let alert = UIAlertController(title: ${1:"confirm title"}, message: ${2:"message"}, preferredStyle: .Alert)
alert.addAction(UIAlertAction(title: ${3:"title"}, style: .default, handler: { action in
		alert.dismissViewControllerAnimated(true, completion: nil)
}))
presentViewController(alert, animated: true, completion: nil)
endsnippet

snippet notification "NSNoTificationCenter (UIKit)"
NSNotificationCenter.default.addObserver(self, selector: #selector(${1:selector}), name: ${2:name}, object: nil)
endsnippet


snippet registerRemoteNotification "NSRemoteNotification (UIKit)"
fileprivate func configNotification() {
	if #available(iOS 10.0, *) {
		let center = UNUserNotificationCenter.current()
			center.delegate = self
			center.requestAuthorization(options: [.alert, .badge, .sound]) {_,_ in }
		UIApplication.shared.registerForRemoteNotifications()
	} else {
		let settings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
			let application = UIApplication.shared
			application.registerUserNotificationSettings(settings)
			application.registerForRemoteNotifications()
	}
}
endsnippet


snippet initViewController "UIViewController custom Init"
init(${1: item}: ${2: T}) {
	self.$1 = $1
	super.init(nibName: nil, bundle: nil)
}

required init?(coder aDecoder: NSCoder) {
	fatalError("init(coder:) has not been implemented")
}
endsnippet

snippet viewDidLoad "UIViewController lift cycle viewDidLoad (UIKit)"
//MARK: UIViewController lifecycle

override func viewDidLoad() {
	super.viewDidLoad()
	${1:viewdidload}
}
endsnippet

snippet viewWillAppear "UIViewController lift cycle viewWillAppear (UIKit)"
override func viewWillAppear(animated: Bool) {
	super.viewWillAppear(animated)
	${1:viewWillAppear}
}
endsnippet


snippet viewDidAppear "UIViewController lift cycle viewDidAppear (UIKit)"
override func viewDidAppear(animated: Bool) {
	super.viewDidAppear(animated)
	${1:viewDidAppear}
}
endsnippet

snippet viewWillDisappear "UIViewController lift cycle viewWillDisappear  (UIKit)"
override func viewWillDisappear(animated: Bool) {
	super.viewWillDisappear(animated)
	${1:viewWillDisappear}}
}
endsnippet

snippet viewDidDisappear "UIViewController lift cycle viewDidDisappear (UIKit)"
override func viewDidDisappear(animated: Bool) {
	super.viewDidDisappear(animated)
	${1:viewDidDisappear}
}
endsnippet

snippet forIn "Array loop"
for ${1:item} in ${2:array} {
	$1.${3:doSomething}
}
endsnippet

snippet forInKey "Dictionary loop"
for (${1:index}, ${2:value}) in ${3:dictionary}.enumerated() {
	$1.${4:doSomethingA}
	$2.${5:doSomethingB}
}
endsnippet

snippet DispatchQueueExtension "DispatchQueue extention"
extension DispatchQueue {
	static var userInteractive: DispatchQueue { return DispatchQueue.global(qos: .userInteractive) }
	static var userInitiated: DispatchQueue { return DispatchQueue.global(qos: .userInitiated) }
	static var utility: DispatchQueue { return DispatchQueue.global(qos: .utility) }
	static var background: DispatchQueue { return DispatchQueue.global(qos: .background) }

	func after(_ delay: TimeInterval, execute closure: @escaping () -> Void) {
		asyncAfter(deadline: .now() + delay, execute: closure)
	}

	func syncResult<T>(_ closure: () -> T) -> T {
		var result: T!
			sync { result = closure() }
		return result
	}
}
endsnippet

snippet asyncMain "DispatchQueue Main Async"
DispatchQueue.main.async {
	${1:doSomething}
}
endsnippet
snippet asyncInteractive "DispatchQueue userInteractive Async"
DispatchQueue.userInteractive.async {
	${1:doSomething}
}
endsnippet
snippet asyncUserInitiated "DispatchQueue userInitiated Async"
DispatchQueue.userInitiated.async {
	${1:doSomething}
}
endsnippet
snippet asyncUtility "DispatchQueue utility Async"
DispatchQueue.utility.async {
	${1:doSomething}
}
endsnippet
snippet asyncBackground "DispatchQueue background Async"
DispatchQueue.background.async {
	${1:doSomething}
}
endsnippet

snippet lazyView "UIView, UIImageView etc. Init"
fileprivate let ${1:view} = Init(${2:UIView}()) {
	$1
}
endsnippet

snippet lazyConsteLabel "UILabel Init"
fileprivate let ${1:label} = Init(UILabel()) {
	\$0.backgroundColor = .clear
	\$0.font = SFFont.constant(.regular, size: 14)
	\$0.textColor = SFColor.hexStr(.TextLv3)
}
endsnippet

snippet lazyConsteButton "UIButton Init"
fileprivate let ${1:button} = Init(UIButton()) {
	\$0.isHidden = true
	\$0.imageEdgeInsets = UIEdgeInsets(top: 15, left: 15, bottom: 12, right: 12)
	\$0.setImage(UIImage(named: ""), for: .normal)
}
endsnippet

snippet lazyConsteTableView "lazy create UITableView"
fileprivate let tableView = Init(UITableView()) {
	\$0.delegate = self
	\$0.dataSource = self
	\$0.estimatedRowHeight = 55
	\$0.rowHeight = UITableViewAutomaticDimension
	\$0.separatorColor = SFColor.hexStr(.TextLv4)
	\$0.backgroundColor = SFColor.hexStr(.BG)
	\$0.tableHeaderView = UIView()
//  once tableview footer view frame height equal zero, it will show bottom line
//		tableView.tableFooterView = UIView(frame: CGRectMake(0, 0, sf_screenW, sf_pixWidth))
	\$0.tableFooterView = self.footerView
	\$0.registerClass($2.self)
}
endsnippet

snippet viewInit" UITableViewCell Init"
final class ${1:cell} : ${2:UITableViewCell} {

	override func configureSubviews() {
		contentView.addSubview(${2:view})
	}

	override func configureConstraints() {
		${3:view}.snp.makeConstraints {
			$0.top.equalTo(centerView)
			$0.centerX.equalTo(contentView)
		}
	}
}
endsnippet

snippet buttonAddTarget "UIButton Add Target"
${1:button}.addTarget(self, action: #selector(${2:touchedButton}, for: .touchUpInside)
endsnippet

snippet makeConstraints "SnapKit make constrains"
${1:view}.snp.makeConstraints {
	$0.edges.equalTo(${2:view})
}
endsnippet

snippet remakeConstraints "SnapKit remake constrains"
${1:view}.snp.remakeConstraints {
	$0.edges.equalTo(${2:view})
}
endsnippet

snippet updateConstraints "SnapKit upate constrains"
${1:view}.snp.updateConstraints {
	$0.edges.equalTo(${2:view})
}
endsnippet

snippet animated "UIView Animation Duration"
UIView.animate(withDuration: ${1:0.25}, animations: {
	${2:doSometing}
}
endsnippet

snippet animatedDelay "UIView Animation Delay"
UIView.animate(withDuration: ${1:0.25}, delay: ${2:0.25}, options: [.allowUserInteraction, .beginFromCurrentState], animations: {
	${2:doSometing}
}) { finished in
	if finished {
	${3:doSometing}
	}
}
endsnippet

snippet overrideConstraints "UIView override super view constrains"
override func updateConstraints() {
	super.updateConstraints()
	${1:view}.snp.updateConstraints {
		\$0.${2:view}.equalTo(${3:view})
	}
}
endsnippet

snippet navigationItem "UIN"
navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:${1:rightButton}];
endsnippet


snippet configureTableView "create and configure UITableView"
private func configureTableView() {
	tableView = UITableView(frame: .zero)
	tableView.backgroundColor = SFColor.hexStr(.BG)
	tableView.scrollsToTop = true
	tableView.registerClass(SFFundListCell.self)
	tableView.registerClass(SFStrategyInfoBannerCell.self)
	tableView.registerClass(SFEmptyCell.self)
	tableView.separatorColor = SFColor.hexStr(.TextLv4)
	tableView.estimatedRowHeight = 105
	tableView.rowHeight = UITableViewAutomaticDimension
	view.addSubview(tableview)
}
endsnippet


snippet CGSize "create a CGSize"
CGSize(width: ${1: 0}, height: ${2: 0})
endsnippet

snippet CGRect "create a CGRect"
CGRect(x: ${1: 0}, y: ${2: 0}, width: ${3: 0}, height: ${4: 0})
endsnippet

snippet UIEdgeInsets "UIEdgeInsets make"
UIEdgeInsets(top: ${1:0}, left: ${2:0}, bottom: ${3:0}, right: ${4:0})
endsnippet
